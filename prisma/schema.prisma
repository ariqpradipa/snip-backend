// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   viewCount Int      @default(0)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", "sqlserver" etc.
  url      = env("DATABASE_URL")
}

enum UserProvider {
  google_oauth2
  windowslive
}

enum OrganizationUserRole {
  admin
  manager
  member
  guest
  invited
  declined
}

enum EventStatus {
  planned
  running
  paused
  ended
  archived
}

enum CodeStatus {
  generated
  scanned
  claimed
  expired
  invalid
  cancelled
}

enum AuditTrailTableName {
  organizations
  organizationUser
  events
  codes
}

enum AuditTrailActionType {
  insert
  update
  delete
}

model User {
  id            String             @id
  username      String             @unique
  nickname      String
  name          String
  avatar        String
  provider      UserProvider
  createdAt     DateTime           @default(now())
  lastLogin     DateTime
  organizations OrganizationUser[]
  auditTrails   AuditTrail[]
}

model Organization {
  id          String             @id @default(uuid())
  name        String
  description String
  contact     String
  avatar      String
  banner      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  users       OrganizationUser[]
  events      Event[]
}

model OrganizationUser {
  id             String               @id @default(uuid())
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User                 @relation(fields: [userId], references: [id])
  userId         String
  role           OrganizationUserRole @default(guest)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model Event {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  name           String
  description    String
  status         EventStatus
  avatar         String
  banner         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  codes          Code[]
}

model Code {
  id          String     @id @default(uuid())
  event       Event      @relation(fields: [eventId], references: [id])
  eventId     String
  code        String
  status      CodeStatus @default(generated)
  claimedDate DateTime?
  expire      DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model AuditTrail {
  id          String               @id @default(uuid())
  tableName   AuditTrailTableName
  fieldName   String
  oldValue    String?
  newValue    String?
  actionType  AuditTrailActionType @default(update)
  changedBy   User                 @relation(fields: [changedById], references: [id])
  changedById String
  changeDate  DateTime             @default(now())
  reason      String?
}
